{"version":3,"sources":["components/InfoLeft.js","components/Forgot.js","components/InfoRight.js","components/RowLogin.js","components/ContainerLogin.js","pages/Login.js","App.js","serviceWorker.js","includes/jquery.js","includes/popper.js","index.js","img/broken.png","img/icon.png"],"names":["InfoLeft","className","src","broken","Forfot","useState","InfoRight","Icon","alt","action","id","type","placeholder","Forgot","RowLogin","Container","login","ContainerLogin","App","Login","Boolean","window","location","hostname","match","jQuery","$","Popper","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"2NAoCeA,EAhCE,WACb,OACI,yBAAKC,UAAU,gDACX,yBAAKA,UAAU,+BACX,wBAAIA,UAAU,2CAAd,eAGJ,yBAAKA,UAAU,wBAEX,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,iBACX,yBAAKC,IAAKC,IAAQF,UAAU,UAEhC,yBAAKA,UAAU,2BACX,wBAAIA,UAAU,aAAd,OACA,wBAAIA,UAAU,mBAAd,sB,uBCHbG,EAXA,WAAO,IAAD,EACOC,oBAAS,GADhB,6BAMnB,OACE,kCCgBWC,EAxBG,WACd,OACI,yBAAKL,UAAU,iCACX,yBAAKA,UAAU,mBACX,yBAAKC,IAAKK,IAAMC,IAAI,MAExB,yBAAKP,UAAU,UACX,wBAAIA,UAAU,oBAAd,UAEJ,0BAAMQ,OAAO,GAAGR,UAAU,UAClB,yBAAKA,UAAU,cAAcS,GAAG,cAC5B,2BAAOC,KAAK,OAAOV,UAAU,gBAAgBW,YAAY,eAE7D,yBAAKX,UAAU,aAAaS,GAAG,kBAC3B,2BAAOC,KAAK,WAAWV,UAAU,iBAAiBW,YAAY,cAElE,4BAAQD,KAAK,SAASV,UAAU,2BAA0B,uBAAGA,UAAU,uBAAvE,eAGR,kBAACY,EAAD,QCXGC,EATE,WACb,OACI,yBAAKb,UAAU,uBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCSGc,EAbG,WACd,OAEI,yBAAKd,UAAU,yBACX,kBAAC,EAAD,QCCGe,EAND,WACV,OACI,kBAACC,EAAD,OCUOC,MAXf,WACE,OAGG,kBAACC,EAAD,OCIeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBNH,OAAOI,OAASJ,OAAOK,EAAIA,E,WCA3BL,OAAOM,OAAQA,U,WCMfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBIzI5BC,EAAOC,QAAU,IAA0B,oC,kBCA3CD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.78b8e332.chunk.js","sourcesContent":["import React from 'react';\nimport broken from '../img/broken.png';\n\n\nconst InfoLeft = () => {\n    return ( \n        <div className=\"info-left d-sm-none d-md-block col-6 rounded\">\n            <div className=\"info-up rounded text-center\">\n                <h3 className=\"text-center display-4 font-weight-bold \">Statistics</h3> \n            </div>\n\n            <div className=\"row  info-down h-100\">\n                \n                <div className=\"col-5 bg-success h-25 \">\n                    <div className=\"row align-items-center h-100 \">\n                        <div className=\"col-6 mx-auto\">\n                            <img src={broken} className=\"w-75\"></img>\n                        </div>\n                        <div className=\"col-5 offset-1 mx-auto \">\n                            <h2 className=\"text-dark\">500</h2>\n                            <h6 className=\"text-dark mb-2 \">Broken links</h6>\n                        </div>\n                    </div>    \n                    \n                </div>\n              \n            </div>\n            \n            \n            \n\n        </div>\n           \n        );\n}\n \nexport default InfoLeft;","import React, { useState,Fragment } from 'react';\n\nimport Modal from 'react-bootstrap';\nimport Button from 'react-bootstrap';\n\n\nconst Forfot = () => {\n    const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <h1>f</h1>\n     );\n}\n \nexport default Forfot;","import React from 'react';\nimport Icon from '../img/icon.png';\nimport Forgot from './Forgot'\n\n\nconst InfoRight = () => {\n    return ( \n        <div className=\"login col-12 col-md-6 rounded\">\n            <div className=\"col-12 user-img\">\n                <img src={Icon} alt=\"\"></img>\n            </div>\n            <div className=\"col-12\">\n                <h2 className=\"col-12 text-dark\">Login</h2>\n            </div>\n            <form action=\"\" className=\"col-12\">\n                    <div className=\"form-group \" id=\"user-group\">\n                        <input type=\"text\" className=\"form-control \" placeholder=\"User name\" ></input>\n                    </div>\n                    <div className=\"form-group\" id=\"password-group\">\n                        <input type=\"password\" className=\"form-control  \" placeholder=\"password\"/>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-success col-12 \"><i className=\"fas fa-sign-in-alt\"></i>  SIGN IN </button>\n            </form>\n                \n            <Forgot/>      \n        </div>\n     );\n}\n \nexport default InfoRight;","import React from 'react';\nimport InfoLeft from './InfoLeft';\nimport InfoRight from './InfoRight';\n\nconst RowLogin = () => {\n    return ( \n        <div className=\"row content rounded\">\n            <InfoLeft/>\n            <InfoRight/>\n        </div>\n     );\n}\n \nexport default RowLogin;","import React from 'react';\nimport RowLogin from './RowLogin';\n\n\nconst Container = () => {\n    return ( \n       \n        <div className=\"container text-center\">\n            <RowLogin/> \n        </div>\n       \n           \n      \n        \n     );\n}\n \nexport default Container;","import React from 'react';\nimport ContainerLogin from '../components/ContainerLogin';\n\nconst login = () => {\n    return ( \n        <ContainerLogin/>\n     );\n}\n \nexport default login;","import React, { Fragment } from 'react';\nimport Login from './pages/Login.js';\n\n\nfunction App() {\n  return (\n    \n     \n     <Login/>\n   \n     \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as $ from 'jquery'\n\nwindow.jQuery = window.$ = $\n","import Popper from 'popper.js'\n\nwindow.Popper= Popper\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './includes/bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/broken.6a5eb735.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.435463c1.png\";"],"sourceRoot":""}