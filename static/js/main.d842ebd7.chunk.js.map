{"version":3,"sources":["img/broken.png","img/icon.png","components/InfoLeft.js","components/Forgot.js","components/InfoRight.js","components/RowLogin.js","components/ContainerLogin.js","pages/Login.js","App.js","serviceWorker.js","includes/jquery.js","includes/popper.js","index.js"],"names":["module","exports","InfoLeft","className","src","broken","Modal","setAppElement","Forfot","useState","showCreate","setshowCreate","showPassword","setshowPassword","type","onClick","isOpen","onRequestClose","shouldCloseOnOverlayClick","class","aria-hidden","id","placeholder","InfoRight","Icon","alt","action","Forgot","RowLogin","Container","login","ContainerLogin","App","Login","Boolean","window","location","hostname","match","jQuery","$","Popper","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d842ebd7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/broken.6a5eb735.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.435463c1.png\";","import React from 'react';\nimport broken from '../img/broken.png';\n\n\nconst InfoLeft = () => {\n    return ( \n        <div className=\"info-left d-sm-none d-md-block col-6 rounded\">\n            <div className=\"info-up rounded text-center\">\n                <h3 className=\"text-center display-4 font-weight-bold \">Statistics</h3> \n            </div>\n\n            <div className=\"row  info-down h-100\">\n                \n                <div className=\"col-5 bg-success h-25 \">\n                    <div className=\"row align-items-center h-100 \">\n                        <div className=\"col-6 mx-auto\">\n                            <img src={broken} className=\"w-75\"></img>\n                        </div>\n                        <div className=\"col-5 offset-1 mx-auto \">\n                            <h2 className=\"text-dark\">500</h2>\n                            <h6 className=\"text-dark mb-2 \">Broken links</h6>\n                        </div>\n                    </div>    \n                    \n                </div>\n              \n            </div>\n            \n            \n            \n\n        </div>\n           \n        );\n}\n \nexport default InfoLeft;","import React, { useState,Fragment } from 'react';\nimport Modal from 'react-modal'\n\nModal.setAppElement('#root')\nconst Forfot = () => {\n    const [showCreate,setshowCreate]=useState(false); \n    const [showPassword,setshowPassword]=useState(false);\n\n    \n\n    return ( \n        <Fragment>\n        <div className=\"row forgot\">\n                <div className=\"col-6 \">\n                    <button type=\"button\" className=\"btn btn-outline-success col-12 \" onClick={()=>setshowPassword(true)}>\n                        <i className=\"fas fa-question\"></i> Forgot Password </button>\n                </div>\n                <div className=\"col-6\">\n                    <button type=\"button\" className=\"btn btn-outline-success col-12 \" onClick={()=>setshowCreate(true)} >\n                        <i className=\"fas fa-user-plus\"></i> Create account </button>\n                </div>\n        </div>  \n\n        <Modal isOpen={showCreate} onRequestClose={()=>setshowCreate(false)} \n        shouldCloseOnOverlayClick={false} className=\"modalCreate col-10 col-md-6 m-5 bg-white mx-auto\">\n            \n                \n                        <div class=\"col-12 \">\n                        <button type=\"button\" class=\"close\" onClick={()=>setshowCreate(false)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    \n                        <h1 class=\"text-center \" id=\"exampleModalLabel\">Create account</h1>\n                                  \n                        <div class=\"form-group \" id=\"\">\n                         <input type=\"text\" class=\"form-control \" placeholder=\"User name\" ></input>\n                        </div>\n                        <div class=\"form-group\" id=\"\">\n                          <input type=\"password\" class=\"form-control  \" placeholder=\"password\"/>\n                        </div>\n                        <div class=\"form-group\" id=\"\">\n                          <input type=\"email\" class=\"form-control  \" placeholder=\"email\"/>\n                        </div>  \n                        <div class=\"form-group\" id=\"\">\n                          <input type=\"number\" class=\"form-control  \" placeholder=\"+57 phone\"/>\n                        </div>        \n                        </div>       \n                        <div className=\"row forgot\">     \n                        <div class=\"col-6\">\n                        <button type=\"button\" class=\"btn btn-secondary col-12\" onClick={()=>setshowCreate(false)}>Close</button>\n                        \n                        </div>\n                        <div class=\"col-6 \">\n                        <button type=\"button\" class=\"btn btn-success col-12\">Create</button>\n                        </div>\n                        </div>\n          \n                \n               \n        </Modal>\n        <Modal isOpen={showPassword} onRequestClose={()=>setshowPassword(false)} \n        shouldCloseOnOverlayClick={false} className=\"modalCreate col-10 col-md-6 m-5 bg-white mx-auto\">\n\n                    <div class=\"col-12 \">\n                        <button type=\"button\" class=\"close\" onClick={()=>setshowPassword(false)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <h1 class=\"text-center \" id=\"exampleModalLabel\">Forgot Password</h1>\n                    <p>We will send you a new temporary password to your email.</p>\n                    <input type=\"text\" class=\"form-control border border-success \" placeholder=\"Email forgot\" ></input>\n                    <div className=\"row forgot\">   \n                        <div class=\"col-6 \">\n                            <button type=\"button\" class=\"btn btn-outline-secondary col-12\" onClick={()=>setshowPassword(false)}>Close</button>\n                        </div>\n                        <div class=\"col-6 \">\n                            <button type=\"button\" class=\"btn btn-outline-success col-12\" >Send</button>\n                        </div>\n                    </div>\n        </Modal>\n        </Fragment>\n     );\n}\n \nexport default Forfot;","import React from 'react';\nimport Icon from '../img/icon.png';\nimport Forgot from './Forgot'\n\n\nconst InfoRight = () => {\n    return ( \n        <div className=\"login col-12 col-md-6 rounded\">\n            <div className=\"col-12 user-img\">\n                <img src={Icon} alt=\"\"></img>\n            </div>\n            <div className=\"col-12\">\n                <h2 className=\"col-12 text-dark\">Login</h2>\n            </div>\n            <form action=\"\" className=\"col-12\">\n                    <div className=\"form-group \" id=\"user-group\">\n                        <input type=\"text\" className=\"form-control \" placeholder=\"User name\" ></input>\n                    </div>\n                    <div className=\"form-group\" id=\"password-group\">\n                        <input type=\"password\" className=\"form-control  \" placeholder=\"password\"/>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-success col-12 \"><i className=\"fas fa-sign-in-alt\"></i>  SIGN IN </button>\n            </form>\n                \n            <Forgot/>      \n        </div>\n     );\n}\n \nexport default InfoRight;","import React from 'react';\nimport InfoLeft from './InfoLeft';\nimport InfoRight from './InfoRight';\n\nconst RowLogin = () => {\n    return ( \n        <div className=\"row content rounded\">\n            <InfoLeft/>\n            <InfoRight/>\n        </div>\n     );\n}\n \nexport default RowLogin;","import React from 'react';\nimport RowLogin from './RowLogin';\n\n\nconst Container = () => {\n    return ( \n       \n        <div className=\"container text-center\">\n            <RowLogin/> \n        </div>\n       \n           \n      \n        \n     );\n}\n \nexport default Container;","import React from 'react';\nimport ContainerLogin from '../components/ContainerLogin';\n\nconst login = () => {\n    return ( \n        <ContainerLogin/>\n     );\n}\n \nexport default login;","import React, { Fragment } from 'react';\nimport Login from './pages/Login.js';\n\n\nfunction App() {\n  return (\n    \n     \n     <Login/>\n   \n     \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as $ from 'jquery'\n\nwindow.jQuery = window.$ = $\n","import Popper from 'popper.js'\n\nwindow.Popper= Popper\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './includes/bootstrap';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}