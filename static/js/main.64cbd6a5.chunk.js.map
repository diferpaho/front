{"version":3,"sources":["img/broken.png","img/icon.png","img/favicon-96x96.png","components/Forgot.js","components/Sidebar.js","components/ContainerDashboard.js","pages/Dashboard.js","App.js","serviceWorker.js","includes/jquery.js","includes/popper.js","index.js"],"names":["module","exports","Modal","setAppElement","Sidebar","className","style","padding","ContainerDashboard","class","Dashboard","App","Boolean","window","location","hostname","match","jQuery","$","Popper","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,4ECA3CD,EAAOC,QAAU,IAA0B,2C,oHCG3CC,IAAMC,cAAc,S,MACpB,ICyBeC,EA1BC,WACZ,OACI,yBAAKC,UAAU,GAAGC,MAAO,CAACC,QAAQ,IAkB9B,oECZGC,EARY,WACvB,OACI,yBAAKC,MAAM,mCAAmCH,MAAO,CAACC,QAAQ,IAC1D,kBAAC,EAAD,QCOGG,EATG,WACd,OACI,kBAAC,WAAD,CAAUJ,MAAO,CAACC,QAAQ,IACrB,kBAAC,EAAD,QCSEI,MAZf,WACE,OAGG,kBAAC,WAAD,CAAUL,MAAO,CAACC,QAAQ,IAC1B,kBAAC,EAAD,QCGeK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBNH,OAAOI,OAASJ,OAAOK,EAAIA,E,WCA3BL,OAAOM,OAAQA,U,YCMfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.64cbd6a5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/broken.6a5eb735.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.435463c1.png\";","module.exports = __webpack_public_path__ + \"static/media/favicon-96x96.86e54d4a.png\";","import React, { useState,Fragment } from 'react';\nimport Modal from 'react-modal'\n\nModal.setAppElement('#root')\nconst Forfot = () => {\n    const [showCreate,setshowCreate]=useState(false); \n    const [showPassword,setshowPassword]=useState(false);\n\n    \n\n    return ( \n        <Fragment>\n        <div className=\"row forgot\">\n                <div className=\"col-6 \">\n                    <button type=\"button\" className=\"btn btn-outline-success col-12 \" onClick={()=>setshowPassword(true)}>\n                        <i className=\"fas fa-question\"></i> Forgot Password </button>\n                </div>\n                <div className=\"col-6\">\n                    <button type=\"button\" className=\"btn btn-outline-success col-12 \" onClick={()=>setshowCreate(true)} >\n                        <i className=\"fas fa-user-plus\"></i> Create account </button>\n                </div>\n        </div>  \n\n        <Modal isOpen={showCreate} onRequestClose={()=>setshowCreate(false)} \n        shouldCloseOnOverlayClick={false} className=\"modalCreate col-10 col-md-6 m-5 bg-white mx-auto\">\n            \n                \n                        <div class=\"col-12 \">\n                        <button type=\"button\" class=\"close\" onClick={()=>setshowCreate(false)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    \n                        <h1 class=\"text-center \" id=\"exampleModalLabel\">Create account</h1>\n                                  \n                        <div class=\"form-group \" id=\"\">\n                         <input type=\"text\" class=\"form-control \" placeholder=\"User name\" ></input>\n                        </div>\n                        <div class=\"form-group\" id=\"\">\n                          <input type=\"password\" class=\"form-control  \" placeholder=\"password\"/>\n                        </div>\n                        <div class=\"form-group\" id=\"\">\n                          <input type=\"email\" class=\"form-control  \" placeholder=\"email\"/>\n                        </div>  \n                        <div class=\"form-group\" id=\"\">\n                          <input type=\"number\" class=\"form-control  \" placeholder=\"+57 phone\"/>\n                        </div>        \n                        </div>       \n                        <div className=\"row forgot\">     \n                        <div class=\"col-6\">\n                        <button type=\"button\" class=\"btn btn-secondary col-12\" onClick={()=>setshowCreate(false)}>Close</button>\n                        \n                        </div>\n                        <div class=\"col-6 \">\n                        <button type=\"button\" class=\"btn btn-success col-12\">Create</button>\n                        </div>\n                        </div>\n          \n                \n               \n        </Modal>\n        <Modal isOpen={showPassword} onRequestClose={()=>setshowPassword(false)} \n        shouldCloseOnOverlayClick={false} className=\"modalCreate col-10 col-md-6 m-5 bg-white mx-auto\">\n\n                    <div class=\"col-12 \">\n                        <button type=\"button\" class=\"close\" onClick={()=>setshowPassword(false)}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <h1 class=\"text-center \" id=\"exampleModalLabel\">Forgot Password</h1>\n                    <p>We will send you a new temporary password to your email.</p>\n                    <input type=\"text\" class=\"form-control border border-success \" placeholder=\"Email forgot\" ></input>\n                    <div className=\"row forgot\">   \n                        <div class=\"col-6 \">\n                            <button type=\"button\" class=\"btn btn-outline-secondary col-12\" onClick={()=>setshowPassword(false)}>Close</button>\n                        </div>\n                        <div class=\"col-6 \">\n                            <button type=\"button\" class=\"btn btn-outline-success col-12\" >Send</button>\n                        </div>\n                    </div>\n        </Modal>\n        </Fragment>\n     );\n}\n \nexport default Forfot;","import React from 'react';\nimport Icon from '../img/favicon-96x96.png';\n\nconst Sidebar = () => {\n    return ( \n        <div className=\"\" style={{padding:0}}>\n            {/* <div className=\"col-6  logo\">\n                <img src={Icon} alt=\"\"></img>\n            </div>\n            <div class=\"menu\">\n                <a href=\"#\" class=\"d-block text-light p-3 border-0\">\n                    Tablero</a>\n\n                <a href=\"#\" class=\"d-block text-light p-3 border-0\">\n                    Usuarios</a>\n\n                <a href=\"#\" class=\"d-block text-light p-3 border-0\">\n                    Estadísticas</a>\n                <a href=\"#\" class=\"d-block text-light p-3 border-0\">\n                    Perfil</a>\n                <a href=\"#\" class=\"d-block text-light p-3 border-0\"> \n                    Configuración</a>\n            </div> */}\n            <h1>hola ddddddddddddddddddddddddddddd</h1>\n        </div>\n        \n     );\n}\n \nexport default Sidebar;","import React from 'react';\nimport Sidebar from './Sidebar'\n\nconst ContainerDashboard = () => {\n    return ( \n        <div class=\"d-flex container content-wrapper\" style={{padding:0}}>\n            <Sidebar></Sidebar>\n        </div>\n     );\n}\n \nexport default ContainerDashboard;","import React, { Fragment } from 'react';\nimport ContainerDashboard from '../components/ContainerDashboard'\n\n\nconst Dashboard = () => {\n    return ( \n        <Fragment style={{padding:0}}>\n             <ContainerDashboard></ContainerDashboard>\n        </Fragment>\n       \n     );\n}\n \nexport default Dashboard;","import React, { Fragment } from 'react';\nimport Login from './pages/Login.js';\nimport Dashboard from './pages/Dashboard'\n\nfunction App() {\n  return (\n    \n     \n     <Fragment style={{padding:0}}>\n     <Dashboard></Dashboard>\n     </Fragment>\n     \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as $ from 'jquery'\n\nwindow.jQuery = window.$ = $\n","import Popper from 'popper.js'\n\nwindow.Popper= Popper\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './includes/bootstrap';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}